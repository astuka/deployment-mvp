// PowerShell script template
const POWERSHELL_TEMPLATE = `# PowerShell Deployment Script - Generated by Deployment Automation Assistant by JBR 
# Generated on: {{GENERATION_DATE}}

Write-Host "Starting IIS Deployment Script..." -ForegroundColor Green

# --- User Configuration ---
$ServerName = "{{SERVER_NAME}}"
$TargetPath = "{{TARGET_DIRECTORY}}"
$AppPoolName = "{{APPLICATION_POOL_NAME}}"
$ArtifactSource = "{{ARTIFACT_SOURCE_PATH}}"
$DeploymentDirectory = Join-Path -Path $TargetPath -ChildPath "app" # Assuming app subdirectory
# --- End User Configuration ---

# Stop Application Pool
Write-Host "Stopping Application Pool '$AppPoolName' on server '$ServerName'..."
try {
    Stop-WebAppPool -Name $AppPoolName -ErrorAction Stop -ComputerName $ServerName
    Write-Host "Application Pool '$AppPoolName' stopped successfully." -ForegroundColor Green
}
catch {
    Write-Warning "Warning: Failed to stop Application Pool '$AppPoolName'. It might not exist or already be stopped."
    Write-Warning $_.Exception.Message
}

# Create Deployment Directory if it doesn't exist
Write-Host "Creating deployment directory '$DeploymentDirectory' if it doesn't exist on server '$ServerName'..."
Invoke-Command -ComputerName $ServerName -ScriptBlock {
    if (!(Test-Path -Path "{{TARGET_DIRECTORY}}\\app" -PathType Container)) {
        New-Item -ItemType Directory -Path "{{TARGET_DIRECTORY}}\\app" | Out-Null
        Write-Host "Deployment directory '{{TARGET_DIRECTORY}}\\app' created." -ForegroundColor Green
    } else {
        Write-Host "Deployment directory '{{TARGET_DIRECTORY}}\\app' already exists."
    }
} -ArgumentList @{ TARGET_DIRECTORY = $TargetPath }

# Copy Artifacts (Assuming ZIP Archive)
Write-Host "Copying artifacts from '$ArtifactSource' to '$DeploymentDirectory' on server '$ServerName'..."
try {
    Copy-Item -Path $ArtifactSource -Destination $DeploymentDirectory -Force -ErrorAction Stop
    Write-Host "Artifacts copied successfully." -ForegroundColor Green
}
catch {
    Write-Error "Error: Failed to copy artifacts."
    Write-Error $_.Exception.Message
    exit 1
}

# Expand Archive (Assuming ZIP Archive - Requires PowerShell 5+)
Write-Host "Extracting archive in '$DeploymentDirectory' on server '$ServerName'..."
try {
    Invoke-Command -ComputerName $ServerName -ScriptBlock {
        Expand-Archive -Path "{{TARGET_DIRECTORY}}\\app\\*.zip" -DestinationPath "{{TARGET_DIRECTORY}}\\app" -Force
        Write-Host "Archive extracted successfully." -ForegroundColor Green
    } -ArgumentList @{ TARGET_DIRECTORY = $TargetPath }
}
catch {
    Write-Warning "Warning: Failed to extract archive. Ensure PowerShell 5+ is installed on the target server and the artifact is a valid ZIP file."
    Write-Warning $_.Exception.Message
}

# Start Application Pool
Write-Host "Starting Application Pool '$AppPoolName' on server '$ServerName'..."
try {
    Start-WebAppPool -Name $AppPoolName -ErrorAction Stop -ComputerName $ServerName
    Write-Host "Application Pool '$AppPoolName' started successfully." -ForegroundColor Green
}
catch {
    Write-Error "Error: Failed to start Application Pool '$AppPoolName'."
    Write-Error $_.Exception.Message
    exit 1
}

Write-Host "IIS Deployment Script Completed." -ForegroundColor Green
exit 0`;

// Function to generate the PowerShell script
function generateScript(formData) {
    const currentDate = new Date().toLocaleString();
    let script = POWERSHELL_TEMPLATE
        .replace(/{{GENERATION_DATE}}/g, currentDate)
        .replace(/{{SERVER_NAME}}/g, formData.serverName)
        .replace(/{{TARGET_DIRECTORY}}/g, formData.targetDirectory)
        .replace(/{{APPLICATION_POOL_NAME}}/g, formData.appPoolName)
        .replace(/{{ARTIFACT_SOURCE_PATH}}/g, formData.artifactSourcePath);
    
    return script;
}

// Function to download the script as a .ps1 file
function downloadScript(script) {
    const blob = new Blob([script], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `deploy_to_iis_${new Date().getTime()}.ps1`;
    document.body.appendChild(a);
    a.click();
    window.URL.revokeObjectURL(url);
    document.body.removeChild(a);
}

// Function to copy script to clipboard
async function copyToClipboard(text) {
    try {
        await navigator.clipboard.writeText(text);
        alert('Script copied to clipboard!');
    } catch (err) {
        console.error('Failed to copy text: ', err);
        alert('Failed to copy to clipboard. Please copy manually.');
    }
}

// Event Listeners
document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('deploymentForm');
    const scriptOutput = document.getElementById('scriptOutput');
    const copyButton = document.getElementById('copyButton');
    const downloadButton = document.getElementById('downloadButton');
    let currentScript = '';

    form.addEventListener('submit', (e) => {
        e.preventDefault();
        const formData = {
            serverName: document.getElementById('serverName').value,
            targetDirectory: document.getElementById('targetDirectory').value,
            appPoolName: document.getElementById('appPoolName').value,
            artifactSourcePath: document.getElementById('artifactSourcePath').value
        };

        currentScript = generateScript(formData);
        scriptOutput.textContent = currentScript;
    });

    copyButton.addEventListener('click', () => {
        if (currentScript) {
            copyToClipboard(currentScript);
        } else {
            alert('Please generate a script first.');
        }
    });

    downloadButton.addEventListener('click', () => {
        if (currentScript) {
            downloadScript(currentScript);
        } else {
            alert('Please generate a script first.');
        }
    });
}); 